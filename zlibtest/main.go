package main

import (
	"bytes"
	"compress/zlib"
	"fmt"
	"io/ioutil"
	"os"
	"zlibtest/general"

	gozlib "github.com/4kills/go-zlib"
)

var Applog *general.OLog2 = general.InitLogEnv("./log", "test2", 1) // level 1~9

func fileread() {
	bmpPath := fmt.Sprintf("./LIBIMG001.FRM")
	//Applog.Print(1, "readinfo:%s", bmpPath)

	dat, err := ioutil.ReadFile(bmpPath)
	if err != nil {
		Applog.Error("ReadBmp Err..%v", err)

	}
	Applog.Dump(1, "readbmp", dat, len(dat))

	Applog.Print(1, "end fileread..")

}

func newreader() {
	//d
	// buff := []byte{120, 156, 202, 72, 205, 201, 201, 215, 81, 40, 207,
	// 	47, 202, 73, 225, 2, 4, 0, 0, 255, 255, 33, 231, 4, 147}
	var buff []byte = []byte{0x78, 0x5E, 0xED, 0x98, 0x41, 0x8E, 0x24, 0x35, 0x10, 0x45, 0xAB, 0x35, 0x17, 0x40, 0x6C, 0x59, 0xB0, 0x65, 0xD9, 0xC3, 0x86, 0x2D, 0xD3, 0x1B, 0x56, 0x08, 0x89, 0x33, 0x70, 0x0C, 0x24, 0xE6, 0x0A, 0xDC, 0x68, 0xB6, 0xDC, 0xA2, 0x8F, 0x42, 0x25, 0x1E, 0x63, 0xC7, 0xF7, 0x8F, 0x70, 0xBA, 0xDA, 0x99, 0x95, 0x5D, 0xF9, 0x9F, 0x35, 0x52, 0xC5, 0xFF, 0x11, 0x51, 0x51, 0xCE, 0xA8, 0x56, 0x69, 0x3E, 0x7D, 0xFC, 0xE9, 0xC7, 0xE7, 0x8F, 0x97, 0xFF, 0xF8, 0xF2, 0xC7, 0xE5, 0xE9, 0xD3, 0xFF, 0xF1, 0x6F, 0x2F, 0xBF, 0xFC, 0xFE, 0xFC, 0xFC, 0x7C, 0x7D, 0xF5, 0xDD, 0xDF, 0x4B, 0xFC, 0xF4, 0xF9, 0xF2, 0xF3, 0x35, 0xE7, 0xE5, 0xE5, 0xD7, 0x97, 0x2F, 0x29, 0xFF, 0xE5, 0xFA, 0xEF, 0x87, 0xEB, 0xBF, 0xCF, 0x4F, 0x97, 0xC5, 0xBA, 0x3C, 0x5D, 0xBE, 0xB9, 0x7C, 0x58, 0x8C, 0xAF, 0xBE, 0xE1, 0xCF, 0xCB, 0xE5, 0xF5, 0x6A, 0x7E, 0x8F, 0xBA, 0x10, 0x42, 0x08, 0x21, 0x84, 0x10, 0x42, 0x08, 0x21, 0x84, 0x10, 0x42, 0x08, 0x21, 0x84, 0x10, 0x62, 0x12, 0xAF, 0x1F, 0xE2, 0x83, 0xF9, 0x11, 0x58, 0x8B, 0x07, 0xF3, 0xC5, 0x9E, 0xBC, 0xFE, 0x15, 0x1F, 0xCC, 0x3F, 0x03, 0x33, 0xF7, 0x72, 0x66, 0x2F, 0x31, 0x9B, 0xF3, 0xEE, 0x78, 0xC4, 0xCC, 0x9D, 0x9D, 0xD9, 0x4B, 0xCC, 0x46, 0xFB, 0xCF, 0x98, 0xB9, 0xB3, 0x33, 0x7B, 0x9D, 0x83, 0xF2, 0xCB, 0x70, 0xFB, 0x9B, 0xD3, 0xFE, 0x33, 0xA2, 0x9B, 0x8F, 0x3C, 0x8E, 0x7D, 0x9E, 0x78, 0x30, 0xFB, 0xEC, 0xD4, 0xB7, 0xB2, 0xFD, 0x0D, 0xE1, 0xFE, 0x63, 0x7C, 0x4E, 0xCA, 0xBD, 0xB7, 0x4F, 0xA0, 0x55, 0x6E, 0x67, 0x66, 0xAF, 0xC7, 0x00, 0x6F, 0x04, 0xE3, 0xD9, 0xE0, 0xBE, 0x63, 0x7C, 0x76, 0xDA, 0xFB, 0x6F, 0x95, 0xDB, 0x99, 0xD9, 0xEB, 0x31, 0xC0, 0x1B, 0xC1, 0x78, 0x6B, 0xB4, 0xFF, 0x96, 0x72, 0xFF, 0xE9, 0x55, 0x3E, 0x98, 0xE7, 0x63, 0xEB, 0xDA, 0x83, 0xF9, 0xE7, 0x06, 0xEF, 0x04, 0xE3, 0xAD, 0xD1, 0xFE, 0x5B, 0xDA, 0xFB, 0x6F, 0x15, 0xB1, 0x1D, 0x7B, 0xDF, 0xB6, 0xF6, 0xDF, 0xFE, 0x75, 0x2E, 0xC7, 0xFA, 0x75, 0x85, 0x0F, 0xF6, 0xC0, 0x6E, 0x23, 0xBD, 0xCE, 0xC9, 0x96, 0x37, 0x94, 0x76, 0x7D, 0xCD, 0xC1, 0xCA, 0xF3, 0xC1, 0xF7, 0x77, 0x8C, 0x52, 0xF9, 0xF6, 0x5E, 0x67, 0x41, 0x37, 0x74, 0x34, 0x6E, 0x7F, 0x22, 0x6D, 0x65, 0xAB, 0x08, 0x8B, 0x6E, 0xE8, 0x5E, 0x78, 0x7F, 0xA3, 0x31, 0x5E, 0x83, 0xED, 0x75, 0xDB, 0x6F, 0xA9, 0xB3, 0x50, 0xDF, 0x89, 0xEE, 0xE7, 0x3E, 0xD8, 0x3D, 0x65, 0x51, 0xC9, 0xED, 0x61, 0xAB, 0x6D, 0x3C, 0xDA, 0xEB, 0x0C, 0xE4, 0xFB, 0xC1, 0x7B, 0xDB, 0x0A, 0xFC, 0xAD, 0xAF, 0x5F, 0xFE, 0xEC, 0xDE, 0x6F, 0xDF, 0xD9, 0x36, 0x1F, 0x7B, 0xB5, 0x19, 0x67, 0x66, 0xDF, 0xDB, 0x88, 0xB6, 0x3C, 0xF2, 0x1E, 0x19, 0xF6, 0x04, 0x70, 0x67, 0xAD, 0x1B, 0x81, 0xFB, 0x5D, 0xC7, 0xA3, 0xBD, 0xCE, 0xC0, 0xBE, 0x77, 0x12, 0xED, 0x78, 0xE4, 0x3D, 0x32, 0xEC, 0x09, 0xBC, 0x6D, 0x67, 0xF3, 0xCE, 0xE7, 0x63, 0xF5, 0x3A, 0x53, 0xEC, 0x7B, 0x27, 0xD1, 0x8E, 0x47, 0xDE, 0x23, 0xC3, 0x9E, 0x40, 0xD1, 0x98, 0x7B, 0x2B, 0x33, 0x7B, 0x3D, 0x0A, 0xFB, 0xDE, 0x49, 0xF9, 0xA5, 0xEF, 0x1D, 0xAC, 0x38, 0x03, 0xE9, 0x19, 0xE4, 0xA7, 0xC0, 0xA2, 0x92, 0x1B, 0x91, 0x2B, 0xE3, 0x83, 0x55, 0xE7, 0x66, 0xDF, 0x3B, 0x89, 0x76, 0x3C, 0xF2, 0x1E, 0x1F, 0x6F, 0x47, 0x31, 0x7E, 0x0B, 0x33, 0x7B, 0x3D, 0x0A, 0xFB, 0xDE, 0x49, 0xB4, 0xE3, 0x91, 0x77, 0x5E, 0x6E, 0x79, 0x3E, 0xF6, 0xBB, 0x54, 0xAA, 0x6F, 0xE9, 0xF5, 0xE8, 0xE0, 0x5D, 0x6D, 0x7B, 0x3F, 0xD1, 0x8E, 0x47, 0x9E, 0x10, 0x42, 0x08, 0x21, 0x84, 0x10, 0x42, 0x08, 0x21, 0x84, 0x10, 0xF7, 0x60, 0xF4, 0xFF, 0xAC, 0x46, 0xF3, 0xA3, 0x8A, 0xE4, 0xF8, 0x07, 0xF3, 0x7D, 0xB0, 0x12, 0x0F, 0xE6, 0x47, 0x8C, 0x57, 0x1C, 0x13, 0xBC, 0x03, 0x3C, 0x98, 0x1F, 0x11, 0x55, 0x60, 0xDF, 0x28, 0xF7, 0x78, 0x8C, 0x4E, 0x3B, 0x9A, 0xEF, 0x57, 0x78, 0xFA, 0x38, 0xF3, 0x3A, 0x2D, 0x8C, 0x74, 0xFB, 0xE7, 0xDB, 0xE5, 0xA0, 0x7A, 0x04, 0x46, 0x3E, 0x45, 0x1F, 0xAF, 0x5B, 0xD2, 0xD1, 0xE1, 0xEA, 0x31, 0x19, 0x9D, 0x74, 0x34, 0xDF, 0xAF, 0xF0, 0xF4, 0x71, 0xE6, 0x75, 0x5A, 0x18, 0xE9, 0x96, 0xF6, 0x7F, 0xEB, 0x6F, 0x40, 0xDE, 0xA7, 0xFE, 0xC1, 0x9A, 0x12, 0xBF, 0x0D, 0xDE, 0x8D, 0xAB, 0x89, 0xC8, 0x3B, 0x12, 0xA3, 0x73, 0x8E, 0xE6, 0xFB, 0x15, 0x9E, 0xCE, 0x49, 0xD9, 0xF9, 0x30, 0xCF, 0x6A, 0x3E, 0x5E, 0x76, 0xD6, 0x3D, 0x9F, 0x91, 0xF7, 0x7F, 0xEB, 0x6F, 0x00, 0xD2, 0x9F, 0xB1, 0x9F, 0x51, 0xD3, 0xCB, 0xE6, 0x3E, 0x57, 0x13, 0x91, 0x77, 0x24, 0xDA, 0x39, 0x93, 0x82, 0xC7, 0xCF, 0xBF, 0xA5, 0x22, 0x81, 0x15, 0xBC, 0xBE, 0x64, 0xB6, 0xAF, 0x3D, 0x25, 0x86, 0xE5, 0x17, 0x8D, 0xB9, 0x1E, 0x65, 0xFF, 0xF7, 0xFD, 0x0E, 0xF4, 0x67, 0xEC, 0x67, 0x58, 0x78, 0x7E, 0x56, 0x63, 0x97, 0x11, 0x79, 0x47, 0xA2, 0x9D, 0x13, 0x15, 0x1B, 0xA3, 0xCB, 0xB4, 0x7E, 0x45, 0x8F, 0xB8, 0x43, 0x2F, 0xEE, 0x83, 0x15, 0x75, 0x8C, 0x5E, 0xC2, 0x6E, 0xBA, 0x77, 0xB0, 0x6A, 0x2B, 0xF8, 0x8C, 0x35, 0xFD, 0x0C, 0x84, 0x55, 0x64, 0x8D, 0x79, 0xC5, 0x47, 0x87, 0xAB, 0xF7, 0x23, 0xCF, 0xE3, 0x1D, 0x96, 0xED, 0xC5, 0xE8, 0x32, 0xAD, 0x5F, 0xD1, 0x23, 0xEE, 0x80, 0x71, 0x84, 0x97, 0x5B, 0xEB, 0xF1, 0xBB, 0x25, 0x70, 0xD3, 0xBD, 0x83, 0x75, 0xDB, 0xC0, 0x67, 0x5C, 0x8B, 0x57, 0x8D, 0x7A, 0x89, 0xD1, 0xA9, 0x49, 0x1E, 0x1E, 0xCC, 0x3A, 0x0E, 0xBD, 0xF9, 0xD0, 0xB7, 0x31, 0xBA, 0x4C, 0xEB, 0x57, 0x14, 0xDD, 0x3F, 0x98, 0xE9, 0xC7, 0x11, 0x5E, 0x6E, 0xAD, 0xDB, 0x1C, 0x5E, 0x81, 0x7B, 0xEE, 0x1F, 0xAC, 0xDC, 0x02, 0x3E, 0xE3, 0x5A, 0xBC, 0x6A, 0xD4, 0x4B, 0x8C, 0xCE, 0x7B, 0xA6, 0xF7, 0x59, 0xD0, 0xB7, 0x31, 0xBA, 0x4C, 0xEB, 0x57, 0x8C, 0x81, 0x1D, 0x30, 0x8E, 0xF0, 0x73, 0xB3, 0x83, 0x19, 0x18, 0x27, 0x70, 0xCB, 0xA3, 0x83, 0xB5, 0xF3, 0xE1, 0x33, 0x66, 0x62, 0x37, 0xF2, 0x6B, 0xC7, 0x7B, 0xBD, 0x8E, 0xF1, 0x8A, 0xBD, 0xE8, 0x4D, 0x86, 0xBE, 0x8D, 0xD1, 0x65, 0x5A, 0xBF, 0x62, 0x0C, 0xEC, 0xC0, 0x63, 0x3C, 0x3C, 0xB7, 0x90, 0x1D, 0xCC, 0xC0, 0x38, 0x81, 0x3B, 0x1E, 0x1F, 0xAC, 0x9E, 0x07, 0x7E, 0xCA, 0x76, 0xD2, 0x05, 0xEE, 0x64, 0x8D, 0xBB, 0x0B, 0xB5, 0xE3, 0xBD, 0x5E, 0xC7, 0x78, 0xC5, 0x5E, 0xF4, 0x26, 0x43, 0xDF, 0xC6, 0xE8, 0x32, 0xAD, 0x5F, 0x31, 0x06, 0x76, 0x58, 0xD3, 0x3F, 0xA9, 0xF9, 0xA0, 0x9B, 0xE0, 0x7E, 0xAB, 0x2C, 0xE0, 0x86, 0xC7, 0x07, 0xAB, 0xE7, 0xD0, 0x4E, 0xDB, 0x2A, 0xD6, 0xE1, 0x4A, 0xEB, 0x15, 0xB2, 0x67, 0x73, 0xDA, 0x0A, 0xFE, 0xCE, 0x45, 0x65, 0xEE, 0x3D, 0xC8, 0x13, 0xF5, 0x8F, 0xAD, 0xC0, 0x0E, 0x3C, 0xE2, 0x1A, 0xAB, 0xF0, 0xB5, 0xF8, 0xB4, 0x1D, 0xEB, 0xD7, 0x2C, 0xB6, 0x44, 0x2E, 0xBE, 0x4B, 0xAD, 0xD6, 0xCA, 0x02, 0x6E, 0x78, 0x7C, 0xB0, 0x7A, 0x06, 0x7C, 0xAE, 0xB5, 0x7A, 0x1D, 0x79, 0x15, 0x0B, 0xD9, 0xF3, 0xAB, 0x0B, 0x49, 0xB5, 0x5D, 0xD7, 0xBC, 0xC7, 0xB1, 0xC1, 0xC9, 0xFB, 0x37, 0x81, 0x5A, 0xBF, 0x62, 0x9C, 0xD4, 0x25, 0x9F, 0xD6, 0xA9, 0x95, 0x9A, 0x71, 0x97, 0x69, 0x63, 0xFB, 0x8F, 0xB5, 0x33, 0xE0, 0x53, 0x25, 0x3C, 0xAF, 0xE8, 0x36, 0xC3, 0xCB, 0x4F, 0x24, 0xD7, 0x66, 0x60, 0x5C, 0xC8, 0x0E, 0x66, 0x60, 0xFC, 0x7E, 0xC0, 0xC9, 0x6D, 0x8C, 0x2E, 0xD3, 0xFA, 0x15, 0xA3, 0xD4, 0x3D, 0xB0, 0x1F, 0xC6, 0x96, 0xE4, 0x7A, 0x39, 0x4C, 0x67, 0xDA, 0xC8, 0xFE, 0x63, 0xE5, 0x1C, 0xF8, 0x54, 0x09, 0xDF, 0x4B, 0x3A, 0xFA, 0x6B, 0xEE, 0x84, 0x55, 0x94, 0xB8, 0x86, 0xE5, 0xC7, 0x15, 0xFB, 0xC2, 0xE7, 0xF3, 0xBD, 0x38, 0x46, 0x97, 0x69, 0xFD, 0x8A, 0x42, 0x99, 0xA0, 0x3E, 0x2C, 0xC7, 0x8B, 0xD1, 0xB5, 0x8C, 0xBB, 0x4C, 0x5B, 0xBF, 0xFF, 0x58, 0x37, 0x0B, 0x3E, 0x55, 0xC2, 0xF7, 0x92, 0x83, 0x6E, 0xAB, 0x58, 0x5A, 0xBF, 0x55, 0x6A, 0x6A, 0xB7, 0xBC, 0x63, 0x54, 0xB1, 0x3F, 0xED, 0x44, 0xAD, 0x52, 0xEB, 0x5E, 0x8C, 0x2E, 0xD3, 0xFA, 0x15, 0x09, 0x3E, 0x41, 0xAB, 0xC6, 0x31, 0xBA, 0x96, 0x71, 0x97, 0x69, 0x6B, 0xF7, 0x1F, 0xAB, 0xE6, 0xC1, 0xA7, 0x4A, 0x8C, 0x7A, 0x4C, 0xAB, 0x69, 0xFD, 0x56, 0xA9, 0x61, 0x2E, 0xD3, 0xEE, 0x4D, 0x3D, 0x93, 0x3F, 0x1F, 0x3A, 0x36, 0x46, 0x97, 0x69, 0xFD, 0x8A, 0x48, 0x5F, 0x88, 0x3B, 0xC4, 0xAE, 0x65, 0xDC, 0x65, 0x9A, 0xC7, 0x5E, 0xDB, 0x1F, 0x4F, 0x35, 0xEA, 0x31, 0xAD, 0xA6, 0xF5, 0x5B, 0xA5, 0x86, 0xB9, 0x4C, 0xBB, 0x3F, 0x79, 0xAA, 0x68, 0x3A, 0xF4, 0x6C, 0x8C, 0x2E, 0xD3, 0xFA, 0x15, 0x91, 0xBE, 0x10, 0x77, 0x88, 0x5D, 0xCB, 0xB8, 0xCB, 0x34, 0x8F, 0x7D, 0x76, 0x3F, 0xE1, 0xCD, 0xE5, 0xE9, 0x09, 0xE6, 0x32, 0xAD, 0xA6, 0xF5, 0x5B, 0x25, 0x6B, 0xEC, 0x78, 0x15, 0x47, 0xC0, 0x4E, 0xC9, 0x40, 0xD7, 0xC6, 0xE8, 0x32, 0xAD, 0x5F, 0x11, 0xE9, 0x0B, 0x71, 0x87, 0xD8, 0xB5, 0x8C, 0xBB, 0x4C, 0xF3, 0xD8, 0x6F, 0xFB, 0x17, 0xD2, 0x64, 0xED, 0x4D, 0x44, 0xD3, 0x32, 0x9F, 0x69, 0x35, 0xAD, 0xDF, 0x2A, 0x3D, 0xC6, 0x2B, 0xF6, 0xA2, 0x37, 0x59, 0xBE, 0x53, 0x7B, 0xAC, 0x5B, 0xE7, 0xDF, 0x52, 0x91, 0xC0, 0x4C, 0x5F, 0xAD, 0x15, 0xCF, 0xC5, 0xE3, 0x65, 0x7B, 0xF9, 0x39, 0x8F, 0x55, 0x78, 0xEC, 0xB9, 0xFD, 0x09, 0x9C, 0xB8, 0x37, 0x29, 0xCB, 0x61, 0x5A, 0x4D, 0xEB, 0xB7, 0x4A, 0x8F, 0xF1, 0x8A, 0xAD, 0xB0, 0xB7, 0xE5, 0x1D, 0xAC, 0xF2, 0x18, 0xCB, 0x5E, 0x88, 0x2B, 0x70, 0x0E, 0x2F, 0xBB, 0xE7, 0x7B, 0x8C, 0xE6, 0xDF, 0x52, 0xF1, 0xDE, 0x18, 0xFF, 0x84, 0x5E, 0x85, 0x7D, 0x2A, 0x75, 0x8E, 0x57, 0x21, 0x84, 0x10, 0x42, 0x08, 0x21, 0x84, 0x10, 0x42, 0x08, 0x21, 0x84, 0x10, 0x62, 0x0D, 0xFF, 0x02, 0x02, 0xA9, 0x73, 0x29}
	b := bytes.NewReader(buff)

	r, err := zlib.NewReader(b)
	if err != nil {
		panic(err)
	}

	var buf []byte = make([]byte, 102400)

	n, err := r.Read(buf)
	if err != nil {
		fmt.Printf("reader err:%v\n", err)
	}
	//Applog.Print(1, "out:%d, [%v]", n, buf[:n])

	Applog.Dump(1, "outdump", buf[:n], n)
	//fmt.Printf("out:%d, [%v]\n", n, buf[:n])

	//io.Copy(os.Stdout, r)

	r.Close()

	//---------------------------------------------
	//------------------------------------------
	// write1 bmp...
	f, err2 := os.Create("./test1.bmp")
	if err2 != nil {
		Applog.Print(2, "#1bmp write err[%v] ", err2)
	}
	defer f.Close()

	n2, err3 := f.Write(buf[50:n])
	if err3 != nil {
		Applog.Print(2, "#2bmp write err[%v] ", err3)
	}
	Applog.Print(1, "write size : %d", n2)
}

func newreader2() {
	//d
	// buff := []byte{120, 156, 202, 72, 205, 201, 201, 215, 81, 40, 207,
	// 	47, 202, 73, 225, 2, 4, 0, 0, 255, 255, 33, 231, 4, 147}
	var buff []byte = []byte{
		0x78, 0x9C, 0xEC, 0x98, 0x3D, 0x92, 0xD4, 0x40, 0x0C,
		0x85, 0x35, 0x35, 0x17, 0x20, 0x27, 0x20, 0x25, 0x9C, 0x25, 0x21, 0x85, 0x49, 0x88, 0x28, 0xAA, 0x38, 0x0B, 0x21, 0x55,
		0xEC, 0x15, 0xB8, 0xD1, 0x1C, 0xC5, 0x47, 0xA1, 0x66, 0x09, 0x76, 0xD6, 0x6E, 0xB5, 0xF4, 0xD4, 0xF2, 0x4F, 0xDB, 0xEF,
		0x9B, 0xC8, 0x76, 0xAB, 0x25, 0x75, 0x3F, 0xAB, 0xE5, 0xF9, 0xFA, 0xF4, 0xF9, 0xD3, 0xE5, 0x49, 0x5E, 0xB8, 0xFD, 0x92,
		0xD3, 0xEB, 0xF5, 0x8F, 0xEB, 0xB7, 0x9F, 0x97, 0xCB, 0x45, 0x44, 0xDE, 0xFF, 0xBD, 0x5F, 0x9F, 0x9E, 0xE5, 0x8B, 0xC8,
		0xED, 0x7A, 0xFD, 0x7E, 0xBD, 0xFD, 0x1F, 0x7F, 0x15, 0x91, 0x8F, 0x22, 0xF2, 0x7C, 0x92, 0xFB, 0x23, 0x39, 0xC9, 0x3B,
		0x39, 0xBF, 0x4C, 0x24, 0x53, 0x7E, 0x8B, 0x0C, 0x67, 0x91, 0x0F, 0x85, 0x47, 0x84, 0x10, 0x42, 0x08, 0x21, 0x84, 0x10,
		0x42, 0x08, 0x21, 0x84, 0x10, 0x42, 0x08, 0x21, 0x84, 0x90, 0x36, 0x86, 0x3F, 0xF7, 0x9F, 0x76, 0x5F, 0xFF, 0x65, 0xF8,
		0x58, 0x8E, 0xF6, 0x1C, 0xA4, 0x21, 0x0F, 0xDC, 0x3B, 0x62, 0x61, 0xED, 0x14, 0x12, 0xF1, 0xFA, 0x3B, 0xB5, 0x34, 0xE5,
		0x8C, 0x73, 0xD7, 0x61, 0xDD, 0x55, 0x2D, 0xAB, 0x60, 0xA9, 0xF7, 0x18, 0xF7, 0x8E, 0x5A, 0xD8, 0xEF, 0x06, 0x1A, 0xAD,
		0x7F, 0x7C, 0xFF, 0xF4, 0xA3, 0x7F, 0xBB, 0xCE, 0x95, 0x34, 0xB2, 0xAE, 0x3A, 0x70, 0xEF, 0x4B, 0x58, 0xC4, 0xE2, 0xED,
		0x13, 0xAB, 0x6A, 0x64, 0xE8, 0xDF, 0xAA, 0xA5, 0x73, 0xAD, 0xAA, 0x67, 0x5E, 0x44, 0x1D, 0xB1, 0xB5, 0xCA, 0xF2, 0xBE,
		0x84, 0x45, 0x7E, 0x86, 0xDB, 0x47, 0x3F, 0x4D, 0xB5, 0xA7, 0xF1, 0x9D, 0xAE, 0x9D, 0xE8, 0x68, 0xDC, 0x5E, 0x9F, 0xF1,
		0x31, 0xBE, 0xD3, 0xC2, 0x5A, 0xAB, 0x3C, 0xEF, 0x4B, 0x58, 0x64, 0x67, 0xD8, 0x03, 0xB5, 0x2A, 0x90, 0x79, 0xA6, 0x5A,
		0xD5, 0x25, 0x1B, 0xDF, 0xBC, 0xE5, 0x37, 0x53, 0x7B, 0x5F, 0xF1, 0xB5, 0xCA, 0xF4, 0x1E, 0xB1, 0x40, 0xF7, 0x2A, 0x3B,
		0xC3, 0x1E, 0xD0, 0x73, 0x5C, 0xBB, 0xA6, 0xB5, 0xE0, 0x9F, 0x77, 0x30, 0xBF, 0x13, 0xCA, 0xB3, 0xB6, 0xAE, 0x15, 0xEE,
		0x3D, 0x1A, 0x6F, 0xED, 0x37, 0x7F, 0x86, 0x5B, 0x67, 0x29, 0xFD, 0xFB, 0x2A, 0x4E, 0x16, 0xF3, 0xCC, 0xBB, 0x7F, 0x75,
		0xEC, 0x3F, 0xC3, 0x29, 0x83, 0xF2, 0x85, 0x93, 0xAD, 0x7F, 0x6F, 0xCF, 0x99, 0x41, 0xEB, 0xBC, 0x56, 0x47, 0xD1, 0xBE,
		0x56, 0xB9, 0xE4, 0xF9, 0xDF, 0x6A, 0x86, 0xF3, 0xE1, 0xCF, 0xB8, 0x7C, 0x6A, 0xBE, 0xDE, 0x9D, 0x47, 0xFF, 0xDE, 0x95,
		0xC7, 0x4E, 0xFA, 0xB7, 0xE3, 0xC7, 0x9E, 0xB6, 0xA8, 0xFF, 0x48, 0xBC, 0x51, 0x2F, 0x47, 0xD2, 0xFF, 0xE3, 0xCA, 0x4E,
		0xEF, 0x6A, 0x63, 0xF5, 0x2B, 0xDB, 0x93, 0xE5, 0xC3, 0x8E, 0xCD, 0x9E, 0xD9, 0x7A, 0x56, 0xD2, 0x8E, 0x47, 0x4F, 0xC8,
		0x5A, 0xD9, 0x39, 0x59, 0xBF, 0xF6, 0x78, 0x71, 0x32, 0x32, 0xEC, 0x8B, 0x5A, 0xC6, 0x35, 0xED, 0x44, 0xD5, 0x8C, 0x5B,
		0x64, 0xEB, 0x7F, 0x28, 0xF6, 0xB6, 0xAD, 0xFA, 0x8F, 0x6B, 0xC4, 0xB2, 0x8C, 0xC7, 0x1B, 0x8D, 0xE5, 0x48, 0xFA, 0xC7,
		0xBF, 0x4D, 0xA3, 0x6B, 0x64, 0x55, 0x39, 0x6F, 0x6C, 0xD8, 0xA8, 0x4C, 0xFD, 0xCF, 0xF3, 0x1D, 0x9F, 0xAF, 0xFF, 0xF2,
		0x4A, 0xFB, 0x56, 0x7F, 0x8E, 0x0C, 0xB7, 0x0D, 0x9E, 0x71, 0x74, 0x8D, 0xCA, 0x3B, 0xD9, 0x0E, 0xF5, 0x8F, 0xF8, 0x47,
		0xBC, 0xF9, 0x22, 0xEC, 0x9B, 0xA3, 0xE9, 0xBF, 0xD6, 0x45, 0x5B, 0xE7, 0x52, 0x96, 0x3A, 0xB0, 0xBA, 0x1C, 0x8F, 0xD7,
		0x9B, 0x43, 0x7E, 0x86, 0xFD, 0x10, 0xD7, 0xBF, 0xE7, 0x3C, 0xD5, 0x67, 0xCD, 0xD6, 0xBF, 0x5F, 0x4F, 0xF1, 0xFF, 0x53,
		0x72, 0xD4, 0x11, 0xB5, 0xC0, 0xE3, 0xD5, 0x67, 0x43, 0x62, 0xA3, 0xFE, 0x5B, 0x2D, 0x4A, 0x63, 0xD6, 0xAB, 0xFF, 0xF5,
		0x71, 0x5B, 0xD4, 0x7F, 0x6D, 0x8E, 0x5C, 0xFF, 0xD4, 0xBF, 0x76, 0xAF, 0xC5, 0xA2, 0x34, 0x66, 0x1D, 0xFD, 0xDB, 0xE7,
		0xC4, 0x52, 0xFA, 0xF7, 0x9D, 0x57, 0x6D, 0xF1, 0xFA, 0xB3, 0xC8, 0xCD, 0xB0, 0x27, 0x8E, 0xA5, 0x7F, 0x7B, 0x0E, 0xD6,
		0xFF, 0x23, 0xE8, 0x1F, 0xAF, 0x29, 0x39, 0x16, 0xE3, 0xA7, 0x79, 0xB9, 0xE0, 0xCF, 0xCA, 0xE3, 0xA6, 0x16, 0x4B, 0xD6,
		0x5F, 0x7C, 0x8E, 0x0C, 0xFF, 0xD9, 0x19, 0xF6, 0xCE, 0x12, 0x7B, 0xBA, 0xE6, 0xAA, 0x4E, 0xDF, 0xC8, 0xF8, 0x6E, 0x47,
		0xF2, 0xD0, 0xF5, 0x56, 0x9E, 0x0D, 0x8F, 0x17, 0xF5, 0x90, 0x9D, 0x21, 0x21, 0x84, 0x10, 0x42, 0x08, 0x21, 0x84, 0x10,
		0x42, 0x08, 0x21, 0x47, 0x64, 0x38, 0xD7, 0x7F, 0x7E, 0x9B, 0xA8, 0xEF, 0xFE, 0x2D, 0x48, 0xAF, 0x44, 0xD5, 0x31, 0xB6,
		0x89, 0xBD, 0x03, 0xDB, 0x54, 0x33, 0xF5, 0x7F, 0x1C, 0xD0, 0xBD, 0xAE, 0x8D, 0xDF, 0xA6, 0x36, 0x73, 0x2C, 0xAC, 0x53,
		0xB2, 0xE5, 0x14, 0x24, 0xEB, 0x31, 0xAF, 0xFE, 0x2D, 0x4D, 0x68, 0x16, 0xFA, 0x48, 0x5F, 0x4F, 0x36, 0x97, 0x0F, 0xCF,
		0x2C, 0xA4, 0x2F, 0xB0, 0x6A, 0x86, 0xD7, 0x7F, 0xFB, 0x3B, 0x02, 0xB9, 0x67, 0x69, 0x77, 0x3A, 0x22, 0xCF, 0x87, 0x27,
		0x5B, 0xB2, 0x1F, 0x10, 0x3D, 0xD7, 0x2B, 0xBD, 0xAD, 0xDA, 0xDA, 0xDD, 0xC7, 0x6B, 0x8F, 0x45, 0xED, 0x2A, 0xEE, 0xC3,
		0x9B, 0x13, 0xD9, 0x0B, 0xBE, 0x5E, 0xC3, 0xD7, 0xF9, 0x62, 0xA7, 0x89, 0xAE, 0xC6, 0x2C, 0xFD, 0xE3, 0x3E, 0xBC, 0xB1,
		0x93, 0x9E, 0xA8, 0x77, 0x3F, 0x99, 0xFB, 0xEB, 0xED, 0x43, 0xC6, 0xF7, 0x6D, 0x6D, 0x4E, 0xEF, 0xF9, 0xAA, 0xF9, 0xA0,
		0xF4, 0xFB, 0xD4, 0xFF, 0x51, 0x69, 0xDB, 0x53, 0xCB, 0xBA, 0xAE, 0xD3, 0xF2, 0x58, 0x8F, 0x36, 0xA9, 0x7F, 0x92, 0x83,
		0x67, 0x4F, 0xF5, 0x13, 0xA2, 0x37, 0xFD, 0x3F, 0xE6, 0xE2, 0x8B, 0x8A, 0xEC, 0x1B, 0xB4, 0x8F, 0x47, 0xFB, 0x66, 0xE4,
		0x8D, 0x41, 0xB4, 0x19, 0x8D, 0x0A, 0xD5, 0x7F, 0xAD, 0x53, 0xE4, 0x3B, 0xD3, 0x1B, 0xD6, 0x6E, 0x4E, 0xF7, 0x35, 0x5E,
		0x69, 0xCB, 0x23, 0x96, 0xD3, 0xBF, 0xE6, 0x49, 0x3F, 0x4F, 0x78, 0x2E, 0x90, 0x31, 0x1E, 0xFD, 0xDB, 0x9A, 0xAE, 0xCD,
		0x57, 0xF7, 0x96, 0xF5, 0xFF, 0x7F, 0xAB, 0x0F, 0x72, 0x4C, 0x5A, 0xEB, 0x3F, 0xD6, 0x31, 0x21, 0xDA, 0x8C, 0x56, 0x6D,
		0xEA, 0x9F, 0x20, 0xD8, 0x9D, 0x46, 0xDC, 0xBE, 0x3E, 0xD6, 0xEF, 0x03, 0xB1, 0xA0, 0xFE, 0x8F, 0x8D, 0xBF, 0xF7, 0xD7,
		0x2C, 0xC6, 0x4F, 0x3C, 0xFE, 0x7C, 0x16, 0xF3, 0xE9, 0xBF, 0x9E, 0x2F, 0xF5, 0x7F, 0x1C, 0x90, 0x6E, 0xBD, 0x65, 0xAE,
		0xF2, 0x98, 0x0C, 0xFD, 0x5B, 0xEF, 0x6E, 0xDE, 0x89, 0x41, 0xFD, 0xEF, 0x0F, 0x44, 0xFF, 0x3E, 0xA5, 0x21, 0x9A, 0x5E,
		0xBF, 0xFF, 0x41, 0x2C, 0xA8, 0xFF, 0xFD, 0xD1, 0x7F, 0xFD, 0xCF, 0x88, 0xCA, 0x67, 0x41, 0xFD, 0xEF, 0x8F, 0xB9, 0xF5,
		0xAF, 0x9D, 0x15, 0x98, 0x85, 0xDD, 0xCD, 0x60, 0x3E, 0xCA, 0x7E, 0xEC, 0xBC, 0x6B, 0x27, 0x20, 0xDF, 0x8D, 0x1E, 0xB1,
		0x76, 0x34, 0xFB, 0xFB, 0xB7, 0x34, 0x57, 0xFF, 0x16, 0x84, 0x10, 0x42, 0x08, 0x21, 0x84, 0x10, 0x42, 0x08, 0x21, 0x84,
		0x10, 0x42, 0x7A, 0xE4, 0x5F, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x31, 0x52, 0x9A, 0x0D}
	b := bytes.NewReader(buff)

	r, err := zlib.NewReader(b)
	if err != nil {
		panic(err)
	}

	var buf []byte = make([]byte, 102400)

	n, err := r.Read(buf)
	if err != nil {
		fmt.Printf("reader2 err:%v\n", err)
	}
	//Applog.Print(1, "out:%d, [%v]", n, buf[:n])

	Applog.Dump(1, "outdump2", buf[:n], n)
	//fmt.Printf("out:%d, [%v]\n", n, buf[:n])

	//io.Copy(os.Stdout, r)

	r.Close()

	//---------------------------------------------
	//------------------------------------------
	// write1 bmp...
	f, err2 := os.Create("./test1.bmp")
	if err2 != nil {
		Applog.Print(2, "#1bmp write err[%v] ", err2)
	}
	defer f.Close()

	n2, err3 := f.Write(buf[50:n])
	if err3 != nil {
		Applog.Print(2, "#2bmp write err[%v] ", err3)
	}
	Applog.Print(1, "write size : %d", n2)
}

func newwriter() {
	//c
	var b bytes.Buffer

	//w := zlib.NewWriter(&b)
	w, err := zlib.NewWriterLevel(&b, 4)
	if err != nil {
		fmt.Print("writer err : %v\n", err)

	}
	w.Write([]byte("hello, world\n"))
	w.Close()
	fmt.Println(b.Bytes())

}

func readFile(path string) []byte {
	dat, err := ioutil.ReadFile(path)
	if err != nil {
		Applog.Error("readFile Err . %v")
	}

	Applog.Print(5, "readFile cnt :%d", len(dat))
	Applog.Dump(1, "readFile", dat[11:], 100)

	return dat[11:]
}

func decompressDat(dat []byte) {
	b := bytes.NewReader(dat)

	r, err := zlib.NewReader(b)
	if err != nil {
		panic(err)
	}

	var buf []byte = make([]byte, 1024000)

	n, err := r.Read(buf)
	if err != nil {
		fmt.Printf("decompressDat err:%v\n", err)
	}
	Applog.Print(1, "out:%d, [%d]", n, len(buf))

	Applog.Dump(1, "decompressDat", buf[:n], 100)

	r.Close()

	// //---------------------------------------------
	// //------------------------------------------
	// // write1 bmp...
	// f, err2 := os.Create("./test10925.bmp")
	// if err2 != nil {
	// 	Applog.Print(2, "#1bmp write err[%v] ", err2)
	// }
	// defer f.Close()

	// n2, err3 := f.Write(buf[50:n])
	// if err3 != nil {
	// 	Applog.Print(2, "#2bmp write err[%v] ", err3)
	// }
	// Applog.Print(1, "write size : %d", n2)
}

func decompressDat2(dat []byte) {

	b := bytes.NewBuffer(dat)   // reader with compressed data
	r, _ := gozlib.NewReader(b) // create a new zlib.Reader, decompressing from b
	defer r.Close()             // don't forget to close this either

	var buf []byte = make([]byte, 1024000)
	n, _ := r.Read(buf)

	Applog.Print(1, "@@out:%d, [%d]", n, len(buf))

	Applog.Dump(1, "@@decompressDat", buf[:n], 100)

	//---------------------------------------------
	//------------------------------------------
	// write1 bmp...
	f, err2 := os.Create("./test10925.bmp")
	if err2 != nil {
		Applog.Print(2, "#1bmp write err[%v] ", err2)
	}
	defer f.Close()

	//n2, err3 := f.Write(buf[50:n])
	n2, err3 := f.Write(buf)
	if err3 != nil {
		Applog.Print(2, "#2bmp write err[%v] ", err3)
	}
	Applog.Print(1, "write size : %d", n2)

}

func main() {
	dat := readFile("./data/Packet.dat")
	decompressDat(dat)

	decompressDat2(dat)
	//fileread()

	Applog.Fileclose()

}
